/* tslint:disable */
/* eslint-disable */
/**
 * BlockScout API
 * API for BlockScout web app
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Address,
  AddressCounters,
  Block,
  CoinBalanceHistoryByDaysEntry,
  GetAddressBlocksValidated200Response,
  GetAddressCoinBalanceHistory200Response,
  GetAddressInternalTxs200Response,
  GetAddressLogs200Response,
  GetAddressNft200Response,
  GetAddressNftCollections200Response,
  GetAddressTokenTransfers200Response,
  GetAddressTokens200Response,
  GetAddressTxs200Response,
  GetAddresses200Response,
  GetBlockTxs200Response,
  GetBlockWithdrawals200Response,
  GetBlocks200Response,
  GetInternalTransactions200Response,
  GetJsonRpcUrl200Response,
  GetMarketChart200Response,
  GetNftInstanceTransfers200Response,
  GetNftInstanceTransfersCount200Response,
  GetNftInstances200Response,
  GetSmartContracts200Response,
  GetSmartContractsCounters200Response,
  GetTokenHolders200Response,
  GetTokenInstanceHolders200Response,
  GetTokenTokenTransfers200Response,
  GetTokenTransfers200Response,
  GetTokensList200Response,
  GetTransactionInternalTxs200Response,
  GetTransactionLogs200Response,
  GetTransactionTokenTransfers200Response,
  GetTxs200Response,
  GetTxsChart200Response,
  IndexingStatus,
  NFTInstance,
  RawTrace,
  RecaptchaBody,
  RefetchTokenInstanceMetadata200Response,
  RefetchTokenInstanceMetadata403Response,
  Search200Response,
  SearchResultRedirect,
  SmartContract,
  StatsResponse,
  TokenBalance,
  TokenCounters,
  TokenInfo,
  Transaction,
  TransactionSummary,
  V1IndexerStatus,
} from '../models/index';
import {
    AddressFromJSON,
    AddressToJSON,
    AddressCountersFromJSON,
    AddressCountersToJSON,
    BlockFromJSON,
    BlockToJSON,
    CoinBalanceHistoryByDaysEntryFromJSON,
    CoinBalanceHistoryByDaysEntryToJSON,
    GetAddressBlocksValidated200ResponseFromJSON,
    GetAddressBlocksValidated200ResponseToJSON,
    GetAddressCoinBalanceHistory200ResponseFromJSON,
    GetAddressCoinBalanceHistory200ResponseToJSON,
    GetAddressInternalTxs200ResponseFromJSON,
    GetAddressInternalTxs200ResponseToJSON,
    GetAddressLogs200ResponseFromJSON,
    GetAddressLogs200ResponseToJSON,
    GetAddressNft200ResponseFromJSON,
    GetAddressNft200ResponseToJSON,
    GetAddressNftCollections200ResponseFromJSON,
    GetAddressNftCollections200ResponseToJSON,
    GetAddressTokenTransfers200ResponseFromJSON,
    GetAddressTokenTransfers200ResponseToJSON,
    GetAddressTokens200ResponseFromJSON,
    GetAddressTokens200ResponseToJSON,
    GetAddressTxs200ResponseFromJSON,
    GetAddressTxs200ResponseToJSON,
    GetAddresses200ResponseFromJSON,
    GetAddresses200ResponseToJSON,
    GetBlockTxs200ResponseFromJSON,
    GetBlockTxs200ResponseToJSON,
    GetBlockWithdrawals200ResponseFromJSON,
    GetBlockWithdrawals200ResponseToJSON,
    GetBlocks200ResponseFromJSON,
    GetBlocks200ResponseToJSON,
    GetInternalTransactions200ResponseFromJSON,
    GetInternalTransactions200ResponseToJSON,
    GetJsonRpcUrl200ResponseFromJSON,
    GetJsonRpcUrl200ResponseToJSON,
    GetMarketChart200ResponseFromJSON,
    GetMarketChart200ResponseToJSON,
    GetNftInstanceTransfers200ResponseFromJSON,
    GetNftInstanceTransfers200ResponseToJSON,
    GetNftInstanceTransfersCount200ResponseFromJSON,
    GetNftInstanceTransfersCount200ResponseToJSON,
    GetNftInstances200ResponseFromJSON,
    GetNftInstances200ResponseToJSON,
    GetSmartContracts200ResponseFromJSON,
    GetSmartContracts200ResponseToJSON,
    GetSmartContractsCounters200ResponseFromJSON,
    GetSmartContractsCounters200ResponseToJSON,
    GetTokenHolders200ResponseFromJSON,
    GetTokenHolders200ResponseToJSON,
    GetTokenInstanceHolders200ResponseFromJSON,
    GetTokenInstanceHolders200ResponseToJSON,
    GetTokenTokenTransfers200ResponseFromJSON,
    GetTokenTokenTransfers200ResponseToJSON,
    GetTokenTransfers200ResponseFromJSON,
    GetTokenTransfers200ResponseToJSON,
    GetTokensList200ResponseFromJSON,
    GetTokensList200ResponseToJSON,
    GetTransactionInternalTxs200ResponseFromJSON,
    GetTransactionInternalTxs200ResponseToJSON,
    GetTransactionLogs200ResponseFromJSON,
    GetTransactionLogs200ResponseToJSON,
    GetTransactionTokenTransfers200ResponseFromJSON,
    GetTransactionTokenTransfers200ResponseToJSON,
    GetTxs200ResponseFromJSON,
    GetTxs200ResponseToJSON,
    GetTxsChart200ResponseFromJSON,
    GetTxsChart200ResponseToJSON,
    IndexingStatusFromJSON,
    IndexingStatusToJSON,
    NFTInstanceFromJSON,
    NFTInstanceToJSON,
    RawTraceFromJSON,
    RawTraceToJSON,
    RecaptchaBodyFromJSON,
    RecaptchaBodyToJSON,
    RefetchTokenInstanceMetadata200ResponseFromJSON,
    RefetchTokenInstanceMetadata200ResponseToJSON,
    RefetchTokenInstanceMetadata403ResponseFromJSON,
    RefetchTokenInstanceMetadata403ResponseToJSON,
    Search200ResponseFromJSON,
    Search200ResponseToJSON,
    SearchResultRedirectFromJSON,
    SearchResultRedirectToJSON,
    SmartContractFromJSON,
    SmartContractToJSON,
    StatsResponseFromJSON,
    StatsResponseToJSON,
    TokenBalanceFromJSON,
    TokenBalanceToJSON,
    TokenCountersFromJSON,
    TokenCountersToJSON,
    TokenInfoFromJSON,
    TokenInfoToJSON,
    TransactionFromJSON,
    TransactionToJSON,
    TransactionSummaryFromJSON,
    TransactionSummaryToJSON,
    V1IndexerStatusFromJSON,
    V1IndexerStatusToJSON,
} from '../models/index';

export interface GetAddressRequest {
    addressHash: string;
}

export interface GetAddressBlocksValidatedRequest {
    addressHash: string;
}

export interface GetAddressCoinBalanceHistoryRequest {
    addressHash: string;
}

export interface GetAddressCoinBalanceHistoryByDayRequest {
    addressHash: string;
}

export interface GetAddressCountersRequest {
    addressHash: string;
}

export interface GetAddressInternalTxsRequest {
    addressHash: string;
    filter?: string;
}

export interface GetAddressLogsRequest {
    addressHash: string;
}

export interface GetAddressNftRequest {
    addressHash: string;
    type?: string;
}

export interface GetAddressNftCollectionsRequest {
    addressHash: string;
    type?: string;
}

export interface GetAddressTokenBalancesRequest {
    addressHash: string;
}

export interface GetAddressTokenTransfersRequest {
    addressHash: string;
    type?: string;
    filter?: string;
    token?: string;
}

export interface GetAddressTokensRequest {
    addressHash: string;
    type?: string;
}

export interface GetAddressTxsRequest {
    addressHash: string;
    filter?: string;
    blockNumber?: number;
    fee?: string;
    hash?: string;
    index?: number;
    insertedAt?: string;
    itemsCount?: number;
    value?: string;
}

export interface GetAddressWithdrawalsRequest {
    addressHash: string;
}

export interface GetBlockRequest {
    blockNumberOrHash: string;
}

export interface GetBlockTxsRequest {
    blockNumberOrHash: string;
}

export interface GetBlockWithdrawalsRequest {
    blockNumberOrHash: string;
}

export interface GetBlocksRequest {
    type?: string;
}

export interface GetNftInstanceRequest {
    addressHash: string;
    id: number;
}

export interface GetNftInstanceTransfersRequest {
    addressHash: string;
    id: number;
}

export interface GetNftInstanceTransfersCountRequest {
    addressHash: string;
    id: number;
}

export interface GetNftInstancesRequest {
    addressHash: string;
}

export interface GetSmartContractRequest {
    addressHash: string;
}

export interface GetSmartContractsRequest {
    q?: string;
    filter?: string;
}

export interface GetTokenRequest {
    addressHash: string;
}

export interface GetTokenCountersRequest {
    addressHash: string;
}

export interface GetTokenHoldersRequest {
    addressHash: string;
}

export interface GetTokenInstanceHoldersRequest {
    addressHash: string;
    id: number;
}

export interface GetTokenTokenTransfersRequest {
    addressHash: string;
}

export interface GetTokensListRequest {
    q?: string;
    type?: string;
}

export interface GetTransactionInternalTxsRequest {
    transactionHash: string;
}

export interface GetTransactionLogsRequest {
    transactionHash: string;
}

export interface GetTransactionRawTraceRequest {
    transactionHash: string;
}

export interface GetTransactionSummaryRequest {
    transactionHash: string;
}

export interface GetTransactionTokenTransfersRequest {
    transactionHash: string;
    type?: string;
}

export interface GetTxRequest {
    transactionHash: string;
}

export interface GetTxsRequest {
    filter?: string;
    type?: string;
    method?: string;
}

export interface RefetchTokenInstanceMetadataRequest {
    addressHash: string;
    id: number;
    recaptchaBody: RecaptchaBody;
}

export interface SearchRequest {
    q?: string;
}

export interface SearchRedirectRequest {
    q?: string;
}

/**
 * DefaultApi - interface
 * 
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary get account abstraction indexing status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAccountAbstractionStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1IndexerStatus>>;

    /**
     * get account abstraction indexing status
     */
    getAccountAbstractionStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1IndexerStatus>;

    /**
     * 
     * @summary get address info
     * @param {string} addressHash Address hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAddressRaw(requestParameters: GetAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Address>>;

    /**
     * get address info
     */
    getAddress(requestParameters: GetAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Address>;

    /**
     * 
     * @summary get blocks validated by address
     * @param {string} addressHash Address hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAddressBlocksValidatedRaw(requestParameters: GetAddressBlocksValidatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressBlocksValidated200Response>>;

    /**
     * get blocks validated by address
     */
    getAddressBlocksValidated(requestParameters: GetAddressBlocksValidatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressBlocksValidated200Response>;

    /**
     * 
     * @summary get address coin balance history
     * @param {string} addressHash Address hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAddressCoinBalanceHistoryRaw(requestParameters: GetAddressCoinBalanceHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressCoinBalanceHistory200Response>>;

    /**
     * get address coin balance history
     */
    getAddressCoinBalanceHistory(requestParameters: GetAddressCoinBalanceHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressCoinBalanceHistory200Response>;

    /**
     * 
     * @summary get address coin balance history by day
     * @param {string} addressHash Address hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAddressCoinBalanceHistoryByDayRaw(requestParameters: GetAddressCoinBalanceHistoryByDayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoinBalanceHistoryByDaysEntry>>>;

    /**
     * get address coin balance history by day
     */
    getAddressCoinBalanceHistoryByDay(requestParameters: GetAddressCoinBalanceHistoryByDayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoinBalanceHistoryByDaysEntry>>;

    /**
     * 
     * @summary get address counters
     * @param {string} addressHash Address hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAddressCountersRaw(requestParameters: GetAddressCountersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressCounters>>;

    /**
     * get address counters
     */
    getAddressCounters(requestParameters: GetAddressCountersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressCounters>;

    /**
     * 
     * @summary get address internal transactions
     * @param {string} addressHash Address hash
     * @param {string} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAddressInternalTxsRaw(requestParameters: GetAddressInternalTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressInternalTxs200Response>>;

    /**
     * get address internal transactions
     */
    getAddressInternalTxs(requestParameters: GetAddressInternalTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressInternalTxs200Response>;

    /**
     * 
     * @summary get address logs
     * @param {string} addressHash Address hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAddressLogsRaw(requestParameters: GetAddressLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressLogs200Response>>;

    /**
     * get address logs
     */
    getAddressLogs(requestParameters: GetAddressLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressLogs200Response>;

    /**
     * 
     * @summary get list of NFT owned by address
     * @param {string} addressHash Address hash
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAddressNftRaw(requestParameters: GetAddressNftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressNft200Response>>;

    /**
     * get list of NFT owned by address
     */
    getAddressNft(requestParameters: GetAddressNftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressNft200Response>;

    /**
     * 
     * @summary get list of NFT owned by address, grouped by collection
     * @param {string} addressHash Address hash
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAddressNftCollectionsRaw(requestParameters: GetAddressNftCollectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressNftCollections200Response>>;

    /**
     * get list of NFT owned by address, grouped by collection
     */
    getAddressNftCollections(requestParameters: GetAddressNftCollectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressNftCollections200Response>;

    /**
     * 
     * @summary get all tokens balances for the address
     * @param {string} addressHash Address hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAddressTokenBalancesRaw(requestParameters: GetAddressTokenBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TokenBalance>>>;

    /**
     * get all tokens balances for the address
     */
    getAddressTokenBalances(requestParameters: GetAddressTokenBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TokenBalance>>;

    /**
     * 
     * @summary get address token transfers
     * @param {string} addressHash Address hash
     * @param {string} [type] 
     * @param {string} [filter] 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAddressTokenTransfersRaw(requestParameters: GetAddressTokenTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressTokenTransfers200Response>>;

    /**
     * get address token transfers
     */
    getAddressTokenTransfers(requestParameters: GetAddressTokenTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressTokenTransfers200Response>;

    /**
     * 
     * @summary token balances with filtering and pagination
     * @param {string} addressHash Address hash
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAddressTokensRaw(requestParameters: GetAddressTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressTokens200Response>>;

    /**
     * token balances with filtering and pagination
     */
    getAddressTokens(requestParameters: GetAddressTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressTokens200Response>;

    /**
     * 
     * @summary get address transactions
     * @param {string} addressHash Address hash
     * @param {string} [filter] 
     * @param {number} [blockNumber] 
     * @param {string} [fee] 
     * @param {string} [hash] 
     * @param {number} [index] 
     * @param {string} [insertedAt] 
     * @param {number} [itemsCount] 
     * @param {string} [value] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAddressTxsRaw(requestParameters: GetAddressTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressTxs200Response>>;

    /**
     * get address transactions
     */
    getAddressTxs(requestParameters: GetAddressTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressTxs200Response>;

    /**
     * 
     * @summary get address withdrawals
     * @param {string} addressHash Address hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAddressWithdrawalsRaw(requestParameters: GetAddressWithdrawalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockWithdrawals200Response>>;

    /**
     * get address withdrawals
     */
    getAddressWithdrawals(requestParameters: GetAddressWithdrawalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockWithdrawals200Response>;

    /**
     * 
     * @summary get native coin holders list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAddressesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddresses200Response>>;

    /**
     * get native coin holders list
     */
    getAddresses(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddresses200Response>;

    /**
     * 
     * @summary get block info
     * @param {string} blockNumberOrHash Block number or hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getBlockRaw(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Block>>;

    /**
     * get block info
     */
    getBlock(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Block>;

    /**
     * 
     * @summary get block transactions
     * @param {string} blockNumberOrHash Block number or hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getBlockTxsRaw(requestParameters: GetBlockTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockTxs200Response>>;

    /**
     * get block transactions
     */
    getBlockTxs(requestParameters: GetBlockTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockTxs200Response>;

    /**
     * 
     * @summary get block withdrawals
     * @param {string} blockNumberOrHash Block number or hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getBlockWithdrawalsRaw(requestParameters: GetBlockWithdrawalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockWithdrawals200Response>>;

    /**
     * get block withdrawals
     */
    getBlockWithdrawals(requestParameters: GetBlockWithdrawalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockWithdrawals200Response>;

    /**
     * 
     * @summary get blocks
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getBlocksRaw(requestParameters: GetBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlocks200Response>>;

    /**
     * get blocks
     */
    getBlocks(requestParameters: GetBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlocks200Response>;

    /**
     * 
     * @summary get indexing status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getIndexingStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexingStatus>>;

    /**
     * get indexing status
     */
    getIndexingStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexingStatus>;

    /**
     * 
     * @summary get internal transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getInternalTransactionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetInternalTransactions200Response>>;

    /**
     * get internal transactions
     */
    getInternalTransactions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetInternalTransactions200Response>;

    /**
     * 
     * @summary get json rpc url
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getJsonRpcUrlRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetJsonRpcUrl200Response>>;

    /**
     * get json rpc url
     */
    getJsonRpcUrl(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetJsonRpcUrl200Response>;

    /**
     * 
     * @summary get main page blocks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMainPageTokensRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Block>>>;

    /**
     * get main page blocks
     */
    getMainPageTokens(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Block>>;

    /**
     * 
     * @summary get main page transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMainPageTxsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Transaction>>>;

    /**
     * get main page transactions
     */
    getMainPageTxs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Transaction>>;

    /**
     * 
     * @summary get market chart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMarketChartRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMarketChart200Response>>;

    /**
     * get market chart
     */
    getMarketChart(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMarketChart200Response>;

    /**
     * 
     * @summary get NFT instance by id
     * @param {string} addressHash Address hash
     * @param {number} id integer id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getNftInstanceRaw(requestParameters: GetNftInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NFTInstance>>;

    /**
     * get NFT instance by id
     */
    getNftInstance(requestParameters: GetNftInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NFTInstance>;

    /**
     * 
     * @summary get transfers of NFT instance
     * @param {string} addressHash Address hash
     * @param {number} id integer id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getNftInstanceTransfersRaw(requestParameters: GetNftInstanceTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNftInstanceTransfers200Response>>;

    /**
     * get transfers of NFT instance
     */
    getNftInstanceTransfers(requestParameters: GetNftInstanceTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNftInstanceTransfers200Response>;

    /**
     * 
     * @summary get transfers count of NFT instance
     * @param {string} addressHash Address hash
     * @param {number} id integer id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getNftInstanceTransfersCountRaw(requestParameters: GetNftInstanceTransfersCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNftInstanceTransfersCount200Response>>;

    /**
     * get transfers count of NFT instance
     */
    getNftInstanceTransfersCount(requestParameters: GetNftInstanceTransfersCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNftInstanceTransfersCount200Response>;

    /**
     * 
     * @summary get NFT instances
     * @param {string} addressHash Address hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getNftInstancesRaw(requestParameters: GetNftInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNftInstances200Response>>;

    /**
     * get NFT instances
     */
    getNftInstances(requestParameters: GetNftInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNftInstances200Response>;

    /**
     * 
     * @summary get smart contract
     * @param {string} addressHash Address hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSmartContractRaw(requestParameters: GetSmartContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SmartContract>>;

    /**
     * get smart contract
     */
    getSmartContract(requestParameters: GetSmartContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SmartContract>;

    /**
     * 
     * @summary get verified smart contracts
     * @param {string} [q] 
     * @param {string} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSmartContractsRaw(requestParameters: GetSmartContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSmartContracts200Response>>;

    /**
     * get verified smart contracts
     */
    getSmartContracts(requestParameters: GetSmartContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSmartContracts200Response>;

    /**
     * 
     * @summary get verified smart contracts counters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSmartContractsCountersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSmartContractsCounters200Response>>;

    /**
     * get verified smart contracts counters
     */
    getSmartContractsCounters(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSmartContractsCounters200Response>;

    /**
     * 
     * @summary get stats counters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatsResponse>>;

    /**
     * get stats counters
     */
    getStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatsResponse>;

    /**
     * 
     * @summary get token info
     * @param {string} addressHash Address hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTokenRaw(requestParameters: GetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenInfo>>;

    /**
     * get token info
     */
    getToken(requestParameters: GetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenInfo>;

    /**
     * 
     * @summary get token holders
     * @param {string} addressHash Address hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTokenCountersRaw(requestParameters: GetTokenCountersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenCounters>>;

    /**
     * get token holders
     */
    getTokenCounters(requestParameters: GetTokenCountersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenCounters>;

    /**
     * 
     * @summary get token holders
     * @param {string} addressHash Address hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTokenHoldersRaw(requestParameters: GetTokenHoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTokenHolders200Response>>;

    /**
     * get token holders
     */
    getTokenHolders(requestParameters: GetTokenHoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTokenHolders200Response>;

    /**
     * 
     * @summary get token instance holders
     * @param {string} addressHash Address hash
     * @param {number} id integer id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTokenInstanceHoldersRaw(requestParameters: GetTokenInstanceHoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTokenInstanceHolders200Response>>;

    /**
     * get token instance holders
     */
    getTokenInstanceHolders(requestParameters: GetTokenInstanceHoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTokenInstanceHolders200Response>;

    /**
     * 
     * @summary get token token transfers
     * @param {string} addressHash Address hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTokenTokenTransfersRaw(requestParameters: GetTokenTokenTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTokenTokenTransfers200Response>>;

    /**
     * get token token transfers
     */
    getTokenTokenTransfers(requestParameters: GetTokenTokenTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTokenTokenTransfers200Response>;

    /**
     * 
     * @summary get token transfers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTokenTransfersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTokenTransfers200Response>>;

    /**
     * get token transfers
     */
    getTokenTransfers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTokenTransfers200Response>;

    /**
     * 
     * @summary get tokens list
     * @param {string} [q] 
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTokensListRaw(requestParameters: GetTokensListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTokensList200Response>>;

    /**
     * get tokens list
     */
    getTokensList(requestParameters: GetTokensListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTokensList200Response>;

    /**
     * 
     * @summary get transaction internal transactions
     * @param {string} transactionHash Transaction hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTransactionInternalTxsRaw(requestParameters: GetTransactionInternalTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionInternalTxs200Response>>;

    /**
     * get transaction internal transactions
     */
    getTransactionInternalTxs(requestParameters: GetTransactionInternalTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionInternalTxs200Response>;

    /**
     * 
     * @summary get transaction logs
     * @param {string} transactionHash Transaction hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTransactionLogsRaw(requestParameters: GetTransactionLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionLogs200Response>>;

    /**
     * get transaction logs
     */
    getTransactionLogs(requestParameters: GetTransactionLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionLogs200Response>;

    /**
     * 
     * @summary get transaction raw trace
     * @param {string} transactionHash Transaction hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTransactionRawTraceRaw(requestParameters: GetTransactionRawTraceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RawTrace>>>;

    /**
     * get transaction raw trace
     */
    getTransactionRawTrace(requestParameters: GetTransactionRawTraceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RawTrace>>;

    /**
     * 
     * @summary get human-readable transaction summary
     * @param {string} transactionHash Transaction hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTransactionSummaryRaw(requestParameters: GetTransactionSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionSummary>>;

    /**
     * get human-readable transaction summary
     */
    getTransactionSummary(requestParameters: GetTransactionSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionSummary>;

    /**
     * 
     * @summary get transaction token transfers
     * @param {string} transactionHash Transaction hash
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTransactionTokenTransfersRaw(requestParameters: GetTransactionTokenTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionTokenTransfers200Response>>;

    /**
     * get transaction token transfers
     */
    getTransactionTokenTransfers(requestParameters: GetTransactionTokenTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionTokenTransfers200Response>;

    /**
     * 
     * @summary get transaction info
     * @param {string} transactionHash Transaction hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTxRaw(requestParameters: GetTxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>>;

    /**
     * get transaction info
     */
    getTx(requestParameters: GetTxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction>;

    /**
     * 
     * @summary get transactions
     * @param {string} [filter] 
     * @param {string} [type] 
     * @param {string} [method] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTxsRaw(requestParameters: GetTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTxs200Response>>;

    /**
     * get transactions
     */
    getTxs(requestParameters: GetTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTxs200Response>;

    /**
     * 
     * @summary get transactions chart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTxsChartRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTxsChart200Response>>;

    /**
     * get transactions chart
     */
    getTxsChart(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTxsChart200Response>;

    /**
     * 
     * @summary get withdrawals
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWithdrawalsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockWithdrawals200Response>>;

    /**
     * get withdrawals
     */
    getWithdrawals(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockWithdrawals200Response>;

    /**
     * 
     * @summary re-fetch token instance metadata
     * @param {string} addressHash Address hash
     * @param {number} id integer id
     * @param {RecaptchaBody} recaptchaBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    refetchTokenInstanceMetadataRaw(requestParameters: RefetchTokenInstanceMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefetchTokenInstanceMetadata200Response>>;

    /**
     * re-fetch token instance metadata
     */
    refetchTokenInstanceMetadata(requestParameters: RefetchTokenInstanceMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefetchTokenInstanceMetadata200Response>;

    /**
     * 
     * @summary search
     * @param {string} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    searchRaw(requestParameters: SearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Search200Response>>;

    /**
     * search
     */
    search(requestParameters: SearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Search200Response>;

    /**
     * 
     * @summary search redirect
     * @param {string} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    searchRedirectRaw(requestParameters: SearchRedirectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResultRedirect>>;

    /**
     * search redirect
     */
    searchRedirect(requestParameters: SearchRedirectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResultRedirect>;

}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     * get account abstraction indexing status
     */
    async getAccountAbstractionStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1IndexerStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/proxy/account-abstraction/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1IndexerStatusFromJSON(jsonValue));
    }

    /**
     * get account abstraction indexing status
     */
    async getAccountAbstractionStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1IndexerStatus> {
        const response = await this.getAccountAbstractionStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * get address info
     */
    async getAddressRaw(requestParameters: GetAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Address>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addresses/{address_hash}`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressFromJSON(jsonValue));
    }

    /**
     * get address info
     */
    async getAddress(requestParameters: GetAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Address> {
        const response = await this.getAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get blocks validated by address
     */
    async getAddressBlocksValidatedRaw(requestParameters: GetAddressBlocksValidatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressBlocksValidated200Response>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getAddressBlocksValidated().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addresses/{address_hash}/blocks-validated`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAddressBlocksValidated200ResponseFromJSON(jsonValue));
    }

    /**
     * get blocks validated by address
     */
    async getAddressBlocksValidated(requestParameters: GetAddressBlocksValidatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressBlocksValidated200Response> {
        const response = await this.getAddressBlocksValidatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get address coin balance history
     */
    async getAddressCoinBalanceHistoryRaw(requestParameters: GetAddressCoinBalanceHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressCoinBalanceHistory200Response>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getAddressCoinBalanceHistory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addresses/{address_hash}/coin-balance-history`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAddressCoinBalanceHistory200ResponseFromJSON(jsonValue));
    }

    /**
     * get address coin balance history
     */
    async getAddressCoinBalanceHistory(requestParameters: GetAddressCoinBalanceHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressCoinBalanceHistory200Response> {
        const response = await this.getAddressCoinBalanceHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get address coin balance history by day
     */
    async getAddressCoinBalanceHistoryByDayRaw(requestParameters: GetAddressCoinBalanceHistoryByDayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoinBalanceHistoryByDaysEntry>>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getAddressCoinBalanceHistoryByDay().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addresses/{address_hash}/coin-balance-history-by-day`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoinBalanceHistoryByDaysEntryFromJSON));
    }

    /**
     * get address coin balance history by day
     */
    async getAddressCoinBalanceHistoryByDay(requestParameters: GetAddressCoinBalanceHistoryByDayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoinBalanceHistoryByDaysEntry>> {
        const response = await this.getAddressCoinBalanceHistoryByDayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get address counters
     */
    async getAddressCountersRaw(requestParameters: GetAddressCountersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressCounters>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getAddressCounters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addresses/{address_hash}/counters`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressCountersFromJSON(jsonValue));
    }

    /**
     * get address counters
     */
    async getAddressCounters(requestParameters: GetAddressCountersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressCounters> {
        const response = await this.getAddressCountersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get address internal transactions
     */
    async getAddressInternalTxsRaw(requestParameters: GetAddressInternalTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressInternalTxs200Response>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getAddressInternalTxs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addresses/{address_hash}/internal-transactions`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAddressInternalTxs200ResponseFromJSON(jsonValue));
    }

    /**
     * get address internal transactions
     */
    async getAddressInternalTxs(requestParameters: GetAddressInternalTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressInternalTxs200Response> {
        const response = await this.getAddressInternalTxsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get address logs
     */
    async getAddressLogsRaw(requestParameters: GetAddressLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressLogs200Response>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getAddressLogs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addresses/{address_hash}/logs`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAddressLogs200ResponseFromJSON(jsonValue));
    }

    /**
     * get address logs
     */
    async getAddressLogs(requestParameters: GetAddressLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressLogs200Response> {
        const response = await this.getAddressLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get list of NFT owned by address
     */
    async getAddressNftRaw(requestParameters: GetAddressNftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressNft200Response>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getAddressNft().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addresses/{address_hash}/nft`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAddressNft200ResponseFromJSON(jsonValue));
    }

    /**
     * get list of NFT owned by address
     */
    async getAddressNft(requestParameters: GetAddressNftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressNft200Response> {
        const response = await this.getAddressNftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get list of NFT owned by address, grouped by collection
     */
    async getAddressNftCollectionsRaw(requestParameters: GetAddressNftCollectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressNftCollections200Response>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getAddressNftCollections().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addresses/{address_hash}/nft/collections`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAddressNftCollections200ResponseFromJSON(jsonValue));
    }

    /**
     * get list of NFT owned by address, grouped by collection
     */
    async getAddressNftCollections(requestParameters: GetAddressNftCollectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressNftCollections200Response> {
        const response = await this.getAddressNftCollectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get all tokens balances for the address
     */
    async getAddressTokenBalancesRaw(requestParameters: GetAddressTokenBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TokenBalance>>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getAddressTokenBalances().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addresses/{address_hash}/token-balances`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TokenBalanceFromJSON));
    }

    /**
     * get all tokens balances for the address
     */
    async getAddressTokenBalances(requestParameters: GetAddressTokenBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TokenBalance>> {
        const response = await this.getAddressTokenBalancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get address token transfers
     */
    async getAddressTokenTransfersRaw(requestParameters: GetAddressTokenTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressTokenTransfers200Response>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getAddressTokenTransfers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addresses/{address_hash}/token-transfers`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAddressTokenTransfers200ResponseFromJSON(jsonValue));
    }

    /**
     * get address token transfers
     */
    async getAddressTokenTransfers(requestParameters: GetAddressTokenTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressTokenTransfers200Response> {
        const response = await this.getAddressTokenTransfersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * token balances with filtering and pagination
     */
    async getAddressTokensRaw(requestParameters: GetAddressTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressTokens200Response>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getAddressTokens().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addresses/{address_hash}/tokens`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAddressTokens200ResponseFromJSON(jsonValue));
    }

    /**
     * token balances with filtering and pagination
     */
    async getAddressTokens(requestParameters: GetAddressTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressTokens200Response> {
        const response = await this.getAddressTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get address transactions
     */
    async getAddressTxsRaw(requestParameters: GetAddressTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddressTxs200Response>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getAddressTxs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['blockNumber'] != null) {
            queryParameters['block_number'] = requestParameters['blockNumber'];
        }

        if (requestParameters['fee'] != null) {
            queryParameters['fee'] = requestParameters['fee'];
        }

        if (requestParameters['hash'] != null) {
            queryParameters['hash'] = requestParameters['hash'];
        }

        if (requestParameters['index'] != null) {
            queryParameters['index'] = requestParameters['index'];
        }

        if (requestParameters['insertedAt'] != null) {
            queryParameters['inserted_at'] = requestParameters['insertedAt'];
        }

        if (requestParameters['itemsCount'] != null) {
            queryParameters['items_count'] = requestParameters['itemsCount'];
        }

        if (requestParameters['value'] != null) {
            queryParameters['value'] = requestParameters['value'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addresses/{address_hash}/transactions`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAddressTxs200ResponseFromJSON(jsonValue));
    }

    /**
     * get address transactions
     */
    async getAddressTxs(requestParameters: GetAddressTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddressTxs200Response> {
        const response = await this.getAddressTxsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get address withdrawals
     */
    async getAddressWithdrawalsRaw(requestParameters: GetAddressWithdrawalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockWithdrawals200Response>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getAddressWithdrawals().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addresses/{address_hash}/withdrawals`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBlockWithdrawals200ResponseFromJSON(jsonValue));
    }

    /**
     * get address withdrawals
     */
    async getAddressWithdrawals(requestParameters: GetAddressWithdrawalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockWithdrawals200Response> {
        const response = await this.getAddressWithdrawalsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get native coin holders list
     */
    async getAddressesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAddresses200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addresses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAddresses200ResponseFromJSON(jsonValue));
    }

    /**
     * get native coin holders list
     */
    async getAddresses(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAddresses200Response> {
        const response = await this.getAddressesRaw(initOverrides);
        return await response.value();
    }

    /**
     * get block info
     */
    async getBlockRaw(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Block>> {
        if (requestParameters['blockNumberOrHash'] == null) {
            throw new runtime.RequiredError(
                'blockNumberOrHash',
                'Required parameter "blockNumberOrHash" was null or undefined when calling getBlock().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blocks/{block_number_or_hash}`.replace(`{${"block_number_or_hash"}}`, encodeURIComponent(String(requestParameters['blockNumberOrHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockFromJSON(jsonValue));
    }

    /**
     * get block info
     */
    async getBlock(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Block> {
        const response = await this.getBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get block transactions
     */
    async getBlockTxsRaw(requestParameters: GetBlockTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockTxs200Response>> {
        if (requestParameters['blockNumberOrHash'] == null) {
            throw new runtime.RequiredError(
                'blockNumberOrHash',
                'Required parameter "blockNumberOrHash" was null or undefined when calling getBlockTxs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blocks/{block_number_or_hash}/transactions`.replace(`{${"block_number_or_hash"}}`, encodeURIComponent(String(requestParameters['blockNumberOrHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBlockTxs200ResponseFromJSON(jsonValue));
    }

    /**
     * get block transactions
     */
    async getBlockTxs(requestParameters: GetBlockTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockTxs200Response> {
        const response = await this.getBlockTxsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get block withdrawals
     */
    async getBlockWithdrawalsRaw(requestParameters: GetBlockWithdrawalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockWithdrawals200Response>> {
        if (requestParameters['blockNumberOrHash'] == null) {
            throw new runtime.RequiredError(
                'blockNumberOrHash',
                'Required parameter "blockNumberOrHash" was null or undefined when calling getBlockWithdrawals().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blocks/{block_number_or_hash}/withdrawals`.replace(`{${"block_number_or_hash"}}`, encodeURIComponent(String(requestParameters['blockNumberOrHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBlockWithdrawals200ResponseFromJSON(jsonValue));
    }

    /**
     * get block withdrawals
     */
    async getBlockWithdrawals(requestParameters: GetBlockWithdrawalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockWithdrawals200Response> {
        const response = await this.getBlockWithdrawalsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get blocks
     */
    async getBlocksRaw(requestParameters: GetBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlocks200Response>> {
        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBlocks200ResponseFromJSON(jsonValue));
    }

    /**
     * get blocks
     */
    async getBlocks(requestParameters: GetBlocksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlocks200Response> {
        const response = await this.getBlocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get indexing status
     */
    async getIndexingStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexingStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/main-page/indexing-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexingStatusFromJSON(jsonValue));
    }

    /**
     * get indexing status
     */
    async getIndexingStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexingStatus> {
        const response = await this.getIndexingStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * get internal transactions
     */
    async getInternalTransactionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetInternalTransactions200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/internal-transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetInternalTransactions200ResponseFromJSON(jsonValue));
    }

    /**
     * get internal transactions
     */
    async getInternalTransactions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetInternalTransactions200Response> {
        const response = await this.getInternalTransactionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * get json rpc url
     */
    async getJsonRpcUrlRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetJsonRpcUrl200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/json-rpc-url`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetJsonRpcUrl200ResponseFromJSON(jsonValue));
    }

    /**
     * get json rpc url
     */
    async getJsonRpcUrl(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetJsonRpcUrl200Response> {
        const response = await this.getJsonRpcUrlRaw(initOverrides);
        return await response.value();
    }

    /**
     * get main page blocks
     */
    async getMainPageTokensRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Block>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/main-page/blocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BlockFromJSON));
    }

    /**
     * get main page blocks
     */
    async getMainPageTokens(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Block>> {
        const response = await this.getMainPageTokensRaw(initOverrides);
        return await response.value();
    }

    /**
     * get main page transactions
     */
    async getMainPageTxsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Transaction>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/main-page/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionFromJSON));
    }

    /**
     * get main page transactions
     */
    async getMainPageTxs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Transaction>> {
        const response = await this.getMainPageTxsRaw(initOverrides);
        return await response.value();
    }

    /**
     * get market chart
     */
    async getMarketChartRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMarketChart200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stats/charts/market`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMarketChart200ResponseFromJSON(jsonValue));
    }

    /**
     * get market chart
     */
    async getMarketChart(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMarketChart200Response> {
        const response = await this.getMarketChartRaw(initOverrides);
        return await response.value();
    }

    /**
     * get NFT instance by id
     */
    async getNftInstanceRaw(requestParameters: GetNftInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NFTInstance>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getNftInstance().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getNftInstance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tokens/{address_hash}/instances/{id}`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NFTInstanceFromJSON(jsonValue));
    }

    /**
     * get NFT instance by id
     */
    async getNftInstance(requestParameters: GetNftInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NFTInstance> {
        const response = await this.getNftInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get transfers of NFT instance
     */
    async getNftInstanceTransfersRaw(requestParameters: GetNftInstanceTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNftInstanceTransfers200Response>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getNftInstanceTransfers().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getNftInstanceTransfers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tokens/{address_hash}/instances/{id}/transfers`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNftInstanceTransfers200ResponseFromJSON(jsonValue));
    }

    /**
     * get transfers of NFT instance
     */
    async getNftInstanceTransfers(requestParameters: GetNftInstanceTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNftInstanceTransfers200Response> {
        const response = await this.getNftInstanceTransfersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get transfers count of NFT instance
     */
    async getNftInstanceTransfersCountRaw(requestParameters: GetNftInstanceTransfersCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNftInstanceTransfersCount200Response>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getNftInstanceTransfersCount().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getNftInstanceTransfersCount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tokens/{address_hash}/instances/{id}/transfers-count`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNftInstanceTransfersCount200ResponseFromJSON(jsonValue));
    }

    /**
     * get transfers count of NFT instance
     */
    async getNftInstanceTransfersCount(requestParameters: GetNftInstanceTransfersCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNftInstanceTransfersCount200Response> {
        const response = await this.getNftInstanceTransfersCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get NFT instances
     */
    async getNftInstancesRaw(requestParameters: GetNftInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNftInstances200Response>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getNftInstances().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tokens/{address_hash}/instances`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNftInstances200ResponseFromJSON(jsonValue));
    }

    /**
     * get NFT instances
     */
    async getNftInstances(requestParameters: GetNftInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNftInstances200Response> {
        const response = await this.getNftInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get smart contract
     */
    async getSmartContractRaw(requestParameters: GetSmartContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SmartContract>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getSmartContract().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/smart-contracts/{address_hash}`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SmartContractFromJSON(jsonValue));
    }

    /**
     * get smart contract
     */
    async getSmartContract(requestParameters: GetSmartContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SmartContract> {
        const response = await this.getSmartContractRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get verified smart contracts
     */
    async getSmartContractsRaw(requestParameters: GetSmartContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSmartContracts200Response>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/smart-contracts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSmartContracts200ResponseFromJSON(jsonValue));
    }

    /**
     * get verified smart contracts
     */
    async getSmartContracts(requestParameters: GetSmartContractsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSmartContracts200Response> {
        const response = await this.getSmartContractsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get verified smart contracts counters
     */
    async getSmartContractsCountersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSmartContractsCounters200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/smart-contracts/counters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSmartContractsCounters200ResponseFromJSON(jsonValue));
    }

    /**
     * get verified smart contracts counters
     */
    async getSmartContractsCounters(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSmartContractsCounters200Response> {
        const response = await this.getSmartContractsCountersRaw(initOverrides);
        return await response.value();
    }

    /**
     * get stats counters
     */
    async getStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatsResponseFromJSON(jsonValue));
    }

    /**
     * get stats counters
     */
    async getStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatsResponse> {
        const response = await this.getStatsRaw(initOverrides);
        return await response.value();
    }

    /**
     * get token info
     */
    async getTokenRaw(requestParameters: GetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenInfo>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tokens/{address_hash}`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenInfoFromJSON(jsonValue));
    }

    /**
     * get token info
     */
    async getToken(requestParameters: GetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenInfo> {
        const response = await this.getTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get token holders
     */
    async getTokenCountersRaw(requestParameters: GetTokenCountersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenCounters>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getTokenCounters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tokens/{address_hash}/counters`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenCountersFromJSON(jsonValue));
    }

    /**
     * get token holders
     */
    async getTokenCounters(requestParameters: GetTokenCountersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenCounters> {
        const response = await this.getTokenCountersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get token holders
     */
    async getTokenHoldersRaw(requestParameters: GetTokenHoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTokenHolders200Response>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getTokenHolders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tokens/{address_hash}/holders`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTokenHolders200ResponseFromJSON(jsonValue));
    }

    /**
     * get token holders
     */
    async getTokenHolders(requestParameters: GetTokenHoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTokenHolders200Response> {
        const response = await this.getTokenHoldersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get token instance holders
     */
    async getTokenInstanceHoldersRaw(requestParameters: GetTokenInstanceHoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTokenInstanceHolders200Response>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getTokenInstanceHolders().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTokenInstanceHolders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tokens/{address_hash}/instances/{id}/holders`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTokenInstanceHolders200ResponseFromJSON(jsonValue));
    }

    /**
     * get token instance holders
     */
    async getTokenInstanceHolders(requestParameters: GetTokenInstanceHoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTokenInstanceHolders200Response> {
        const response = await this.getTokenInstanceHoldersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get token token transfers
     */
    async getTokenTokenTransfersRaw(requestParameters: GetTokenTokenTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTokenTokenTransfers200Response>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling getTokenTokenTransfers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tokens/{address_hash}/transfers`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTokenTokenTransfers200ResponseFromJSON(jsonValue));
    }

    /**
     * get token token transfers
     */
    async getTokenTokenTransfers(requestParameters: GetTokenTokenTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTokenTokenTransfers200Response> {
        const response = await this.getTokenTokenTransfersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get token transfers
     */
    async getTokenTransfersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTokenTransfers200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/token-transfers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTokenTransfers200ResponseFromJSON(jsonValue));
    }

    /**
     * get token transfers
     */
    async getTokenTransfers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTokenTransfers200Response> {
        const response = await this.getTokenTransfersRaw(initOverrides);
        return await response.value();
    }

    /**
     * get tokens list
     */
    async getTokensListRaw(requestParameters: GetTokensListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTokensList200Response>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTokensList200ResponseFromJSON(jsonValue));
    }

    /**
     * get tokens list
     */
    async getTokensList(requestParameters: GetTokensListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTokensList200Response> {
        const response = await this.getTokensListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get transaction internal transactions
     */
    async getTransactionInternalTxsRaw(requestParameters: GetTransactionInternalTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionInternalTxs200Response>> {
        if (requestParameters['transactionHash'] == null) {
            throw new runtime.RequiredError(
                'transactionHash',
                'Required parameter "transactionHash" was null or undefined when calling getTransactionInternalTxs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transactions/{transaction_hash}/internal-transactions`.replace(`{${"transaction_hash"}}`, encodeURIComponent(String(requestParameters['transactionHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransactionInternalTxs200ResponseFromJSON(jsonValue));
    }

    /**
     * get transaction internal transactions
     */
    async getTransactionInternalTxs(requestParameters: GetTransactionInternalTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionInternalTxs200Response> {
        const response = await this.getTransactionInternalTxsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get transaction logs
     */
    async getTransactionLogsRaw(requestParameters: GetTransactionLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionLogs200Response>> {
        if (requestParameters['transactionHash'] == null) {
            throw new runtime.RequiredError(
                'transactionHash',
                'Required parameter "transactionHash" was null or undefined when calling getTransactionLogs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transactions/{transaction_hash}/logs`.replace(`{${"transaction_hash"}}`, encodeURIComponent(String(requestParameters['transactionHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransactionLogs200ResponseFromJSON(jsonValue));
    }

    /**
     * get transaction logs
     */
    async getTransactionLogs(requestParameters: GetTransactionLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionLogs200Response> {
        const response = await this.getTransactionLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get transaction raw trace
     */
    async getTransactionRawTraceRaw(requestParameters: GetTransactionRawTraceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RawTrace>>> {
        if (requestParameters['transactionHash'] == null) {
            throw new runtime.RequiredError(
                'transactionHash',
                'Required parameter "transactionHash" was null or undefined when calling getTransactionRawTrace().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transactions/{transaction_hash}/raw-trace`.replace(`{${"transaction_hash"}}`, encodeURIComponent(String(requestParameters['transactionHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RawTraceFromJSON));
    }

    /**
     * get transaction raw trace
     */
    async getTransactionRawTrace(requestParameters: GetTransactionRawTraceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RawTrace>> {
        const response = await this.getTransactionRawTraceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get human-readable transaction summary
     */
    async getTransactionSummaryRaw(requestParameters: GetTransactionSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionSummary>> {
        if (requestParameters['transactionHash'] == null) {
            throw new runtime.RequiredError(
                'transactionHash',
                'Required parameter "transactionHash" was null or undefined when calling getTransactionSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transactions/{transaction_hash}/summary`.replace(`{${"transaction_hash"}}`, encodeURIComponent(String(requestParameters['transactionHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionSummaryFromJSON(jsonValue));
    }

    /**
     * get human-readable transaction summary
     */
    async getTransactionSummary(requestParameters: GetTransactionSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionSummary> {
        const response = await this.getTransactionSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get transaction token transfers
     */
    async getTransactionTokenTransfersRaw(requestParameters: GetTransactionTokenTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionTokenTransfers200Response>> {
        if (requestParameters['transactionHash'] == null) {
            throw new runtime.RequiredError(
                'transactionHash',
                'Required parameter "transactionHash" was null or undefined when calling getTransactionTokenTransfers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transactions/{transaction_hash}/token-transfers`.replace(`{${"transaction_hash"}}`, encodeURIComponent(String(requestParameters['transactionHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransactionTokenTransfers200ResponseFromJSON(jsonValue));
    }

    /**
     * get transaction token transfers
     */
    async getTransactionTokenTransfers(requestParameters: GetTransactionTokenTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionTokenTransfers200Response> {
        const response = await this.getTransactionTokenTransfersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get transaction info
     */
    async getTxRaw(requestParameters: GetTxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>> {
        if (requestParameters['transactionHash'] == null) {
            throw new runtime.RequiredError(
                'transactionHash',
                'Required parameter "transactionHash" was null or undefined when calling getTx().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transactions/{transaction_hash}`.replace(`{${"transaction_hash"}}`, encodeURIComponent(String(requestParameters['transactionHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionFromJSON(jsonValue));
    }

    /**
     * get transaction info
     */
    async getTx(requestParameters: GetTxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction> {
        const response = await this.getTxRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get transactions
     */
    async getTxsRaw(requestParameters: GetTxsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTxs200Response>> {
        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTxs200ResponseFromJSON(jsonValue));
    }

    /**
     * get transactions
     */
    async getTxs(requestParameters: GetTxsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTxs200Response> {
        const response = await this.getTxsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get transactions chart
     */
    async getTxsChartRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTxsChart200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stats/charts/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTxsChart200ResponseFromJSON(jsonValue));
    }

    /**
     * get transactions chart
     */
    async getTxsChart(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTxsChart200Response> {
        const response = await this.getTxsChartRaw(initOverrides);
        return await response.value();
    }

    /**
     * get withdrawals
     */
    async getWithdrawalsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlockWithdrawals200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/withdrawals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBlockWithdrawals200ResponseFromJSON(jsonValue));
    }

    /**
     * get withdrawals
     */
    async getWithdrawals(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlockWithdrawals200Response> {
        const response = await this.getWithdrawalsRaw(initOverrides);
        return await response.value();
    }

    /**
     * re-fetch token instance metadata
     */
    async refetchTokenInstanceMetadataRaw(requestParameters: RefetchTokenInstanceMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefetchTokenInstanceMetadata200Response>> {
        if (requestParameters['addressHash'] == null) {
            throw new runtime.RequiredError(
                'addressHash',
                'Required parameter "addressHash" was null or undefined when calling refetchTokenInstanceMetadata().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling refetchTokenInstanceMetadata().'
            );
        }

        if (requestParameters['recaptchaBody'] == null) {
            throw new runtime.RequiredError(
                'recaptchaBody',
                'Required parameter "recaptchaBody" was null or undefined when calling refetchTokenInstanceMetadata().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tokens/{address_hash}/instances/{id}/refetch-metadata`.replace(`{${"address_hash"}}`, encodeURIComponent(String(requestParameters['addressHash']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RecaptchaBodyToJSON(requestParameters['recaptchaBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefetchTokenInstanceMetadata200ResponseFromJSON(jsonValue));
    }

    /**
     * re-fetch token instance metadata
     */
    async refetchTokenInstanceMetadata(requestParameters: RefetchTokenInstanceMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefetchTokenInstanceMetadata200Response> {
        const response = await this.refetchTokenInstanceMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * search
     */
    async searchRaw(requestParameters: SearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Search200Response>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Search200ResponseFromJSON(jsonValue));
    }

    /**
     * search
     */
    async search(requestParameters: SearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Search200Response> {
        const response = await this.searchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * search redirect
     */
    async searchRedirectRaw(requestParameters: SearchRedirectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResultRedirect>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search/check-redirect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResultRedirectFromJSON(jsonValue));
    }

    /**
     * search redirect
     */
    async searchRedirect(requestParameters: SearchRedirectRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResultRedirect> {
        const response = await this.searchRedirectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
