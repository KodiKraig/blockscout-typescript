/* tslint:disable */
/* eslint-disable */
/**
 * BlockScout API
 * API for BlockScout web app
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  V1CelestiaBlob,
  V1CelestiaL2BatchMetadata,
  V1HealthCheckResponse,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    V1CelestiaBlobFromJSON,
    V1CelestiaBlobToJSON,
    V1CelestiaL2BatchMetadataFromJSON,
    V1CelestiaL2BatchMetadataToJSON,
    V1HealthCheckResponseFromJSON,
    V1HealthCheckResponseToJSON,
} from '../models/index';

export interface CelestiaServiceGetBlobRequest {
    height?: string;
    commitment?: string;
    skipData?: boolean;
}

export interface CelestiaServiceGetL2BatchMetadataRequest {
    height?: string;
    namespace?: string;
    commitment?: string;
}

export interface HealthCheckRequest {
    service?: string;
}

/**
 * CelestiaServiceApi - interface
 * 
 * @export
 * @interface CelestiaServiceApiInterface
 */
export interface CelestiaServiceApiInterface {
    /**
     * 
     * @param {string} [height] 
     * @param {string} [commitment] 
     * @param {boolean} [skipData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CelestiaServiceApiInterface
     */
    celestiaServiceGetBlobRaw(requestParameters: CelestiaServiceGetBlobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CelestiaBlob>>;

    /**
     */
    celestiaServiceGetBlob(requestParameters: CelestiaServiceGetBlobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CelestiaBlob>;

    /**
     * 
     * @param {string} [height] 
     * @param {string} [namespace] 
     * @param {string} [commitment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CelestiaServiceApiInterface
     */
    celestiaServiceGetL2BatchMetadataRaw(requestParameters: CelestiaServiceGetL2BatchMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CelestiaL2BatchMetadata>>;

    /**
     */
    celestiaServiceGetL2BatchMetadata(requestParameters: CelestiaServiceGetL2BatchMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CelestiaL2BatchMetadata>;

    /**
     * 
     * @summary If the requested service is unknown, the call will fail with status NOT_FOUND.
     * @param {string} [service] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CelestiaServiceApiInterface
     */
    healthCheckRaw(requestParameters: HealthCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1HealthCheckResponse>>;

    /**
     * If the requested service is unknown, the call will fail with status NOT_FOUND.
     */
    healthCheck(requestParameters: HealthCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1HealthCheckResponse>;

}

/**
 * 
 */
export class CelestiaServiceApi extends runtime.BaseAPI implements CelestiaServiceApiInterface {

    /**
     */
    async celestiaServiceGetBlobRaw(requestParameters: CelestiaServiceGetBlobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CelestiaBlob>> {
        const queryParameters: any = {};

        if (requestParameters['height'] != null) {
            queryParameters['height'] = requestParameters['height'];
        }

        if (requestParameters['commitment'] != null) {
            queryParameters['commitment'] = requestParameters['commitment'];
        }

        if (requestParameters['skipData'] != null) {
            queryParameters['skipData'] = requestParameters['skipData'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/celestia/blob`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CelestiaBlobFromJSON(jsonValue));
    }

    /**
     */
    async celestiaServiceGetBlob(requestParameters: CelestiaServiceGetBlobRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CelestiaBlob> {
        const response = await this.celestiaServiceGetBlobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async celestiaServiceGetL2BatchMetadataRaw(requestParameters: CelestiaServiceGetL2BatchMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CelestiaL2BatchMetadata>> {
        const queryParameters: any = {};

        if (requestParameters['height'] != null) {
            queryParameters['height'] = requestParameters['height'];
        }

        if (requestParameters['namespace'] != null) {
            queryParameters['namespace'] = requestParameters['namespace'];
        }

        if (requestParameters['commitment'] != null) {
            queryParameters['commitment'] = requestParameters['commitment'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/celestia/l2BatchMetadata`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CelestiaL2BatchMetadataFromJSON(jsonValue));
    }

    /**
     */
    async celestiaServiceGetL2BatchMetadata(requestParameters: CelestiaServiceGetL2BatchMetadataRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CelestiaL2BatchMetadata> {
        const response = await this.celestiaServiceGetL2BatchMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * If the requested service is unknown, the call will fail with status NOT_FOUND.
     */
    async healthCheckRaw(requestParameters: HealthCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1HealthCheckResponse>> {
        const queryParameters: any = {};

        if (requestParameters['service'] != null) {
            queryParameters['service'] = requestParameters['service'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1HealthCheckResponseFromJSON(jsonValue));
    }

    /**
     * If the requested service is unknown, the call will fail with status NOT_FOUND.
     */
    async healthCheck(requestParameters: HealthCheckRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1HealthCheckResponse> {
        const response = await this.healthCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
