/* tslint:disable */
/* eslint-disable */
/**
 * BlockScout API
 * API for BlockScout web app
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AddressParam } from './AddressParam';
import {
    AddressParamFromJSON,
    AddressParamFromJSONTyped,
    AddressParamToJSON,
} from './AddressParam';
import type { Reward } from './Reward';
import {
    RewardFromJSON,
    RewardFromJSONTyped,
    RewardToJSON,
} from './Reward';

/**
 * 
 * @export
 * @interface Block
 */
export interface Block {
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    baseFeePerGas: string;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    burntFees: string;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    burntFeesPercentage: number;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    difficulty: string;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    extraData: string;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    gasLimit: string;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    gasTargetPercentage: number;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    gasUsed: string;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    gasUsedPercentage: number;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    hash: string;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    height: number;
    /**
     * 
     * @type {AddressParam}
     * @memberof Block
     */
    miner: AddressParam;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    nonce: string;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    parentHash: string;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    priorityFee: string;
    /**
     * 
     * @type {Array<Reward>}
     * @memberof Block
     */
    rewards: Array<Reward>;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    size: number;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    stateRoot: string;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    timestamp: string;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    totalDifficulty: string;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    txCount: number;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    txFees: string;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    type: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Block
     */
    unclesHashes: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    withdrawalsCount: number;
}

/**
 * Check if a given object implements the Block interface.
 */
export function instanceOfBlock(value: object): boolean {
    if (!('baseFeePerGas' in value)) return false;
    if (!('burntFees' in value)) return false;
    if (!('burntFeesPercentage' in value)) return false;
    if (!('difficulty' in value)) return false;
    if (!('extraData' in value)) return false;
    if (!('gasLimit' in value)) return false;
    if (!('gasTargetPercentage' in value)) return false;
    if (!('gasUsed' in value)) return false;
    if (!('gasUsedPercentage' in value)) return false;
    if (!('hash' in value)) return false;
    if (!('height' in value)) return false;
    if (!('miner' in value)) return false;
    if (!('nonce' in value)) return false;
    if (!('parentHash' in value)) return false;
    if (!('priorityFee' in value)) return false;
    if (!('rewards' in value)) return false;
    if (!('size' in value)) return false;
    if (!('stateRoot' in value)) return false;
    if (!('timestamp' in value)) return false;
    if (!('totalDifficulty' in value)) return false;
    if (!('txCount' in value)) return false;
    if (!('txFees' in value)) return false;
    if (!('type' in value)) return false;
    if (!('unclesHashes' in value)) return false;
    if (!('withdrawalsCount' in value)) return false;
    return true;
}

export function BlockFromJSON(json: any): Block {
    return BlockFromJSONTyped(json, false);
}

export function BlockFromJSONTyped(json: any, ignoreDiscriminator: boolean): Block {
    if (json == null) {
        return json;
    }
    return {
        
        'baseFeePerGas': json['base_fee_per_gas'],
        'burntFees': json['burnt_fees'],
        'burntFeesPercentage': json['burnt_fees_percentage'],
        'difficulty': json['difficulty'],
        'extraData': json['extra_data'],
        'gasLimit': json['gas_limit'],
        'gasTargetPercentage': json['gas_target_percentage'],
        'gasUsed': json['gas_used'],
        'gasUsedPercentage': json['gas_used_percentage'],
        'hash': json['hash'],
        'height': json['height'],
        'miner': AddressParamFromJSON(json['miner']),
        'nonce': json['nonce'],
        'parentHash': json['parent_hash'],
        'priorityFee': json['priority_fee'],
        'rewards': ((json['rewards'] as Array<any>).map(RewardFromJSON)),
        'size': json['size'],
        'stateRoot': json['state_root'],
        'timestamp': json['timestamp'],
        'totalDifficulty': json['total_difficulty'],
        'txCount': json['tx_count'],
        'txFees': json['tx_fees'],
        'type': json['type'],
        'unclesHashes': json['uncles_hashes'],
        'withdrawalsCount': json['withdrawals_count'],
    };
}

export function BlockToJSON(value?: Block | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'base_fee_per_gas': value['baseFeePerGas'],
        'burnt_fees': value['burntFees'],
        'burnt_fees_percentage': value['burntFeesPercentage'],
        'difficulty': value['difficulty'],
        'extra_data': value['extraData'],
        'gas_limit': value['gasLimit'],
        'gas_target_percentage': value['gasTargetPercentage'],
        'gas_used': value['gasUsed'],
        'gas_used_percentage': value['gasUsedPercentage'],
        'hash': value['hash'],
        'height': value['height'],
        'miner': AddressParamToJSON(value['miner']),
        'nonce': value['nonce'],
        'parent_hash': value['parentHash'],
        'priority_fee': value['priorityFee'],
        'rewards': ((value['rewards'] as Array<any>).map(RewardToJSON)),
        'size': value['size'],
        'state_root': value['stateRoot'],
        'timestamp': value['timestamp'],
        'total_difficulty': value['totalDifficulty'],
        'tx_count': value['txCount'],
        'tx_fees': value['txFees'],
        'type': value['type'],
        'uncles_hashes': value['unclesHashes'],
        'withdrawals_count': value['withdrawalsCount'],
    };
}

