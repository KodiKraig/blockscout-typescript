/* tslint:disable */
/* eslint-disable */
/**
 * BlockScout API
 * API for BlockScout web app
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AddressParam } from './AddressParam';
import {
    AddressParamFromJSON,
    AddressParamFromJSONTyped,
    AddressParamToJSON,
} from './AddressParam';
import type { DecodedInput } from './DecodedInput';
import {
    DecodedInputFromJSON,
    DecodedInputFromJSONTyped,
    DecodedInputToJSON,
} from './DecodedInput';
import type { Fee } from './Fee';
import {
    FeeFromJSON,
    FeeFromJSONTyped,
    FeeToJSON,
} from './Fee';
import type { TokenTransfer } from './TokenTransfer';
import {
    TokenTransferFromJSON,
    TokenTransferFromJSONTyped,
    TokenTransferToJSON,
} from './TokenTransfer';
import type { TransactionAction } from './TransactionAction';
import {
    TransactionActionFromJSON,
    TransactionActionFromJSONTyped,
    TransactionActionToJSON,
} from './TransactionAction';

/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    timestamp: string;
    /**
     * 
     * @type {Fee}
     * @memberof Transaction
     */
    fee: Fee;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    gasLimit: number;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    blockNumber: number;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    method: string;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    confirmations: number;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    type: number;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    exchangeRate: string;
    /**
     * 
     * @type {AddressParam}
     * @memberof Transaction
     */
    to: AddressParam;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    transactionBurntFee: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    maxFeePerGas: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    result: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    hash: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    gasPrice: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    priorityFee: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    baseFeePerGas: string;
    /**
     * 
     * @type {AddressParam}
     * @memberof Transaction
     */
    from: AddressParam;
    /**
     * 
     * @type {Array<TokenTransfer>}
     * @memberof Transaction
     */
    tokenTransfers: Array<TokenTransfer>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Transaction
     */
    transactionTypes: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    gasUsed: string;
    /**
     * 
     * @type {AddressParam}
     * @memberof Transaction
     */
    createdContract: AddressParam;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    position: number;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    nonce: number;
    /**
     * 
     * @type {boolean}
     * @memberof Transaction
     */
    hasErrorInInternalTransactions: boolean;
    /**
     * 
     * @type {Array<TransactionAction>}
     * @memberof Transaction
     */
    actions: Array<TransactionAction>;
    /**
     * 
     * @type {DecodedInput}
     * @memberof Transaction
     */
    decodedInput: DecodedInput;
    /**
     * 
     * @type {boolean}
     * @memberof Transaction
     */
    tokenTransfersOverflow: boolean;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    rawInput: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    maxPriorityFeePerGas: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    revertReason: string;
    /**
     * 
     * @type {object}
     * @memberof Transaction
     */
    confirmationDuration: object;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    transactionTag: string;
}

/**
 * Check if a given object implements the Transaction interface.
 */
export function instanceOfTransaction(value: object): boolean {
    if (!('timestamp' in value)) return false;
    if (!('fee' in value)) return false;
    if (!('gasLimit' in value)) return false;
    if (!('blockNumber' in value)) return false;
    if (!('status' in value)) return false;
    if (!('method' in value)) return false;
    if (!('confirmations' in value)) return false;
    if (!('type' in value)) return false;
    if (!('exchangeRate' in value)) return false;
    if (!('to' in value)) return false;
    if (!('transactionBurntFee' in value)) return false;
    if (!('maxFeePerGas' in value)) return false;
    if (!('result' in value)) return false;
    if (!('hash' in value)) return false;
    if (!('gasPrice' in value)) return false;
    if (!('priorityFee' in value)) return false;
    if (!('baseFeePerGas' in value)) return false;
    if (!('from' in value)) return false;
    if (!('tokenTransfers' in value)) return false;
    if (!('transactionTypes' in value)) return false;
    if (!('gasUsed' in value)) return false;
    if (!('createdContract' in value)) return false;
    if (!('position' in value)) return false;
    if (!('nonce' in value)) return false;
    if (!('hasErrorInInternalTransactions' in value)) return false;
    if (!('actions' in value)) return false;
    if (!('decodedInput' in value)) return false;
    if (!('tokenTransfersOverflow' in value)) return false;
    if (!('rawInput' in value)) return false;
    if (!('value' in value)) return false;
    if (!('maxPriorityFeePerGas' in value)) return false;
    if (!('revertReason' in value)) return false;
    if (!('confirmationDuration' in value)) return false;
    if (!('transactionTag' in value)) return false;
    return true;
}

export function TransactionFromJSON(json: any): Transaction {
    return TransactionFromJSONTyped(json, false);
}

export function TransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Transaction {
    if (json == null) {
        return json;
    }
    return {
        
        'timestamp': json['timestamp'],
        'fee': FeeFromJSON(json['fee']),
        'gasLimit': json['gas_limit'],
        'blockNumber': json['block_number'],
        'status': json['status'],
        'method': json['method'],
        'confirmations': json['confirmations'],
        'type': json['type'],
        'exchangeRate': json['exchange_rate'],
        'to': AddressParamFromJSON(json['to']),
        'transactionBurntFee': json['transaction_burnt_fee'],
        'maxFeePerGas': json['max_fee_per_gas'],
        'result': json['result'],
        'hash': json['hash'],
        'gasPrice': json['gas_price'],
        'priorityFee': json['priority_fee'],
        'baseFeePerGas': json['base_fee_per_gas'],
        'from': AddressParamFromJSON(json['from']),
        'tokenTransfers': ((json['token_transfers'] as Array<any>).map(TokenTransferFromJSON)),
        'transactionTypes': json['transaction_types'],
        'gasUsed': json['gas_used'],
        'createdContract': AddressParamFromJSON(json['created_contract']),
        'position': json['position'],
        'nonce': json['nonce'],
        'hasErrorInInternalTransactions': json['has_error_in_internal_transactions'],
        'actions': ((json['actions'] as Array<any>).map(TransactionActionFromJSON)),
        'decodedInput': DecodedInputFromJSON(json['decoded_input']),
        'tokenTransfersOverflow': json['token_transfers_overflow'],
        'rawInput': json['raw_input'],
        'value': json['value'],
        'maxPriorityFeePerGas': json['max_priority_fee_per_gas'],
        'revertReason': json['revert_reason'],
        'confirmationDuration': json['confirmation_duration'],
        'transactionTag': json['transaction_tag'],
    };
}

export function TransactionToJSON(value?: Transaction | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'timestamp': value['timestamp'],
        'fee': FeeToJSON(value['fee']),
        'gas_limit': value['gasLimit'],
        'block_number': value['blockNumber'],
        'status': value['status'],
        'method': value['method'],
        'confirmations': value['confirmations'],
        'type': value['type'],
        'exchange_rate': value['exchangeRate'],
        'to': AddressParamToJSON(value['to']),
        'transaction_burnt_fee': value['transactionBurntFee'],
        'max_fee_per_gas': value['maxFeePerGas'],
        'result': value['result'],
        'hash': value['hash'],
        'gas_price': value['gasPrice'],
        'priority_fee': value['priorityFee'],
        'base_fee_per_gas': value['baseFeePerGas'],
        'from': AddressParamToJSON(value['from']),
        'token_transfers': ((value['tokenTransfers'] as Array<any>).map(TokenTransferToJSON)),
        'transaction_types': value['transactionTypes'],
        'gas_used': value['gasUsed'],
        'created_contract': AddressParamToJSON(value['createdContract']),
        'position': value['position'],
        'nonce': value['nonce'],
        'has_error_in_internal_transactions': value['hasErrorInInternalTransactions'],
        'actions': ((value['actions'] as Array<any>).map(TransactionActionToJSON)),
        'decoded_input': DecodedInputToJSON(value['decodedInput']),
        'token_transfers_overflow': value['tokenTransfersOverflow'],
        'raw_input': value['rawInput'],
        'value': value['value'],
        'max_priority_fee_per_gas': value['maxPriorityFeePerGas'],
        'revert_reason': value['revertReason'],
        'confirmation_duration': value['confirmationDuration'],
        'transaction_tag': value['transactionTag'],
    };
}

